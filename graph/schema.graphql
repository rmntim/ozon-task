type User {
    id: ID!
    username: String!
    email: String!
    posts: [Post!]!
}

type Post {
    id: ID!
    title: String!
    createdAt: Timestamp!
    content: String!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    content: String!
    author: User!
    createdAt: Timestamp!
    post: Post!
    parentComment: Comment
    replies: [Comment!]!
}

type Query {
    # Fetch a user by ID
    user(id: ID!): User
    # Fetch all users
    users(limit: Int! = 10, offset: Int! = 0): [User!]!
    # Fetch a post by ID
    post(id: ID!): Post
    # Fetch all posts
    posts(limit: Int! = 10, offset: Int! = 0): [Post!]!
    # Fetch a comment by ID
    comment(id: ID!): Comment
    # Fetch all comments
    comments(limit: Int! = 10, offset: Int! = 0): [Comment!]!
}

type Mutation {
    # Create a new user
    createUser(username: String!, email: String!, password: String!): User
    # Create a new post
    createPost(title: String!, content: String!, authorId: ID!): Post
    # Create a new comment
    createComment(content: String!, authorId: ID!, postId: ID!, parentCommentId: ID): Comment
}

type Subscription {
    # Subscription for new posts
    postAdded: Post
    # Subscription for new comments
    commentAdded(postId: ID!): Comment
}

scalar Timestamp

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}